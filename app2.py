{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": none,
   "id": "bb6d6c6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox\n",
    "from tkinter import ttk\n",
    "from reportlab.lib.pagesizes import letter\n",
    "from reportlab.pdfgen import canvas\n",
    "import openpyxl\n",
    "from openpyxl import Workbook\n",
    "import os\n",
    "import re\n",
    "\n",
    "# File to store the data\n",
    "FILE_NAME = \"Student_Details.xlsx\"\n",
    "\n",
    "# Global variable to store the generated PDF file path\n",
    "pdf_filename = \"\"\n",
    "\n",
    "# Function to generate a professional PDF receipt with token number\n",
    "def generate_pdf(name, roll_number, age, branch, phone, dob, email, address, token_number):\n",
    "    global pdf_filename\n",
    "    pdf_filename = f\"Student_Receipt_{token_number}.pdf\"\n",
    "    \n",
    "    c = canvas.Canvas(pdf_filename, pagesize=letter)\n",
    "    \n",
    "    # Header\n",
    "    c.setFont(\"Helvetica-Bold\", 20)\n",
    "    c.drawString(180, 770, \"Student Details Receipt\")\n",
    "    \n",
    "    # Add Institution Name (Professional Design)\n",
    "    c.setFont(\"Helvetica\", 12)\n",
    "    c.drawString(100, 750, \"Fr. C. Rodrigues Institute of Technology\")\n",
    "    c.drawString(100, 740, \"Navi Mumbai, Maharashtra, India\")\n",
    "    \n",
    "    # Text Art or Custom Banner\n",
    "    c.setFont(\"Courier\", 10)\n",
    "    art = \"\"\"\n",
    "    ******************************************\n",
    "    ***    Student Information Receipt    ***\n",
    "    ******************************************\n",
    "    \"\"\"\n",
    "    c.drawString(100, 715, art.strip())  # Add text art\n",
    "    \n",
    "    # Add receipt details with proper alignment and professional look\n",
    "    c.setFont(\"Helvetica-Bold\", 12)\n",
    "    c.drawString(100, 690, f\"Name: {name}\")\n",
    "    c.drawString(100, 670, f\"Roll Number: {roll_number}\")\n",
    "    c.drawString(100, 650, f\"Age: {age}\")\n",
    "    c.drawString(100, 630, f\"Branch: {branch}\")\n",
    "    c.drawString(100, 610, f\"Phone: {phone}\")\n",
    "    c.drawString(100, 590, f\"Date of Birth: {dob}\")\n",
    "    c.drawString(100, 570, f\"Email: {email}\")\n",
    "    c.drawString(100, 550, f\"Address: {address}\")\n",
    "    c.drawString(100, 530, f\"Token Number: {token_number}\")\n",
    "    \n",
    "    # Footer with professionalism (e.g., contact information or website)\n",
    "    c.setFont(\"Helvetica-Oblique\", 8)\n",
    "    c.drawString(100, 100, \"Contact us at: contact@fcrit.ac.in | www.fcrit.ac.in\")\n",
    "    \n",
    "    # Save the PDF\n",
    "    c.save()\n",
    "\n",
    "    messagebox.showinfo(\"PDF Generated\", f\"PDF receipt has been saved as {pdf_filename}.\")\n",
    "    return pdf_filename\n",
    "\n",
    "# Function to save student details to Excel and assign token number\n",
    "def save_to_excel(name, roll_number, age, branch, phone, dob, email, address):\n",
    "    if not os.path.exists(FILE_NAME):\n",
    "        # Create a new workbook and add a header row\n",
    "        workbook = Workbook()\n",
    "        sheet = workbook.active\n",
    "        sheet.title = \"Details\"\n",
    "        sheet.append([\"Token Number\", \"Name\", \"Roll Number\", \"Age\", \"Branch\", \"Phone\", \"Date of Birth\", \"Email\", \"Address\"])\n",
    "        workbook.save(FILE_NAME)\n",
    "\n",
    "    # Open the workbook\n",
    "    workbook = openpyxl.load_workbook(FILE_NAME)\n",
    "    sheet = workbook.active\n",
    "\n",
    "    # Assign a unique token number based on the number of rows\n",
    "    token_number = sheet.max_row  # Token number is the current row number\n",
    "\n",
    "    # Check for duplicate Roll Number\n",
    "    for row in sheet.iter_rows(min_row=2, values_only=True):\n",
    "        if row[2] == roll_number:\n",
    "            return False, token_number\n",
    "\n",
    "    # Append the data with token number\n",
    "    sheet.append([token_number, name, roll_number, age, branch, phone, dob, email, address])  # Add data row with token number\n",
    "    workbook.save(FILE_NAME)\n",
    "    return True, token_number\n",
    "\n",
    "# Function to collect and display student details\n",
    "def submit_details():\n",
    "    name = name_entry.get()\n",
    "    roll_number = roll_entry.get()\n",
    "    age = age_entry.get()\n",
    "    branch = branch_combobox.get()\n",
    "    phone = phone_entry.get()\n",
    "    dob = dob_entry.get()\n",
    "    email = email_entry.get()\n",
    "    address = address_entry.get()\n",
    "\n",
    "    if not (name and roll_number and age and branch and phone and dob and email and address) or branch == \"Select Branch\":\n",
    "        messagebox.showwarning(\"Input Error\", \"All fields are required!\")\n",
    "        return\n",
    "\n",
    "    # Validate email using regex\n",
    "    if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n",
    "        messagebox.showwarning(\"Invalid Email\", \"Please enter a valid email address!\")\n",
    "        return\n",
    "\n",
    "    # Validate phone number\n",
    "    if not re.match(r\"^\\d{10}$\", phone):\n",
    "        messagebox.showwarning(\"Invalid Phone Number\", \"Phone number should be 10 digits!\")\n",
    "        return\n",
    "\n",
    "    # Save details to Excel and check for duplicates\n",
    "    is_saved, token_number = save_to_excel(name, roll_number, age, branch, phone, dob, email, address)\n",
    "    if is_saved:\n",
    "        messagebox.showinfo(\"Success\", \"Your contact has been updated!\")\n",
    "        \n",
    "        # Generate PDF receipt with token number\n",
    "        generate_pdf(name, roll_number, age, branch, phone, dob, email, address, token_number)\n",
    "\n",
    "        clear_fields()\n",
    "        ask_download(token_number)  # Ask if the user wants to download the PDF\n",
    "    else:\n",
    "        messagebox.showwarning(\"Duplicate Entry\", \"This record already exists!\")\n",
    "\n",
    "# Function to clear input fields\n",
    "def clear_fields():\n",
    "    name_entry.delete(0, tk.END)\n",
    "    roll_entry.delete(0, tk.END)\n",
    "    age_entry.delete(0, tk.END)\n",
    "    phone_entry.delete(0, tk.END)\n",
    "    dob_entry.delete(0, tk.END)\n",
    "    email_entry.delete(0, tk.END)\n",
    "    address_entry.delete(0, tk.END)\n",
    "    branch_combobox.set(\"Select Branch\")\n",
    "\n",
    "# Function to ask if the user wants to download the PDF\n",
    "def ask_download(token_number):\n",
    "    response = messagebox.askquestion(\"Download Receipt\", f\"Do you want to download the receipt for token {token_number}?\")\n",
    "    if response == \"yes\":\n",
    "        download_receipt()\n",
    "\n",
    "# Function to download the PDF receipt\n",
    "def download_receipt():\n",
    "    if pdf_filename:\n",
    "        messagebox.showinfo(\"Download Receipt\", f\"Download your receipt from: {os.path.abspath(pdf_filename)}\")\n",
    "\n",
    "# Function to handle pressing Enter to move to the next field\n",
    "def focus_next_field(event):\n",
    "    current_widget = event.widget\n",
    "    widget_list = [name_entry, roll_entry, age_entry, branch_combobox, phone_entry, dob_entry, email_entry, address_entry]\n",
    "    next_widget = widget_list[widget_list.index(current_widget) + 1] if widget_list.index(current_widget) + 1 < len(widget_list) else submit_button\n",
    "    next_widget.focus_set()\n",
    "\n",
    "# Create main window\n",
    "root = tk.Tk()\n",
    "root.title(\"Student Details Form\")\n",
    "root.geometry(\"500x700\")\n",
    "root.configure(bg=\"#f5f5f5\")  # Set background color\n",
    "\n",
    "# Create a frame for the form elements\n",
    "form_frame = tk.Frame(root, bg=\"#f5f5f5\")\n",
    "form_frame.pack(pady=20)\n",
    "\n",
    "# Add header label with enhanced styling\n",
    "header_label = tk.Label(form_frame, text=\"Student Details Form\", font=(\"Poppins\", 18, \"bold\"), bg=\"#f5f5f5\", fg=\"black\")\n",
    "header_label.grid(row=0, column=0, columnspan=2, pady=10)\n",
    "\n",
    "# Create labels and entry fields with enhanced styling\n",
    "tk.Label(form_frame, text=\"Name:\", font=(\"Poppins\", 12), bg=\"#f5f5f5\").grid(row=1, column=0, padx=10, pady=5, sticky=\"w\")\n",
    "name_entry = tk.Entry(form_frame, font=(\"Poppins\", 12), width=30, bd=2, relief=\"solid\")\n",
    "name_entry.grid(row=1, column=1, pady=5)\n",
    "name_entry.bind(\"<Return>\", focus_next_field)\n",
    "\n",
    "tk.Label(form_frame, text=\"Roll Number:\", font=(\"Poppins\", 12), bg=\"#f5f5f5\").grid(row=2, column=0, padx=10, pady=5, sticky=\"w\")\n",
    "roll_entry = tk.Entry(form_frame, font=(\"Poppins\", 12), width=30, bd=2, relief=\"solid\")\n",
    "roll_entry.grid(row=2, column=1, pady=5)\n",
    "roll_entry.bind(\"<Return>\", focus_next_field)\n",
    "\n",
    "tk.Label(form_frame, text=\"Age:\", font=(\"Poppins\", 12), bg=\"#f5f5f5\").grid(row=3, column=0, padx=10, pady=5, sticky=\"w\")\n",
    "age_entry = tk.Entry(form_frame, font=(\"Poppins\", 12), width=30, bd=2, relief=\"solid\")\n",
    "age_entry.grid(row=3, column=1, pady=5)\n",
    "age_entry.bind(\"<Return>\", focus_next_field)\n",
    "\n",
    "tk.Label(form_frame, text=\"Phone:\", font=(\"Poppins\", 12), bg=\"#f5f5f5\").grid(row=4, column=0, padx=10, pady=5, sticky=\"w\")\n",
    "phone_entry = tk.Entry(form_frame, font=(\"Poppins\", 12), width=30, bd=2, relief=\"solid\")\n",
    "phone_entry.grid(row=4, column=1, pady=5)\n",
    "phone_entry.bind(\"<Return>\", focus_next_field)\n",
    "\n",
    "tk.Label(form_frame, text=\"Date of Birth:\", font=(\"Poppins\", 12), bg=\"#f5f5f5\").grid(row=5, column=0, padx=10, pady=5, sticky=\"w\")\n",
    "dob_entry = tk.Entry(form_frame, font=(\"Poppins\", 12), width=30, bd=2, relief=\"solid\")\n",
    "dob_entry.grid(row=5, column=1, pady=5)\n",
    "dob_entry.bind(\"<Return>\", focus_next_field)\n",
    "\n",
    "tk.Label(form_frame, text=\"Email:\", font=(\"Poppins\", 12), bg=\"#f5f5f5\").grid(row=6, column=0, padx=10, pady=5, sticky=\"w\")\n",
    "email_entry = tk.Entry(form_frame, font=(\"Poppins\", 12), width=30, bd=2, relief=\"solid\")\n",
    "email_entry.grid(row=6, column=1, pady=5)\n",
    "email_entry.bind(\"<Return>\", focus_next_field)\n",
    "\n",
    "tk.Label(form_frame, text=\"Address:\", font=(\"Poppins\", 12), bg=\"#f5f5f5\").grid(row=7, column=0, padx=10, pady=5, sticky=\"w\")\n",
    "address_entry = tk.Entry(form_frame, font=(\"Poppins\", 12), width=30, bd=2, relief=\"solid\")\n",
    "address_entry.grid(row=7, column=1, pady=5)\n",
    "address_entry.bind(\"<Return>\", focus_next_field)\n",
    "\n",
    "tk.Label(form_frame, text=\"Branch:\", font=(\"Poppins\", 12), bg=\"#f5f5f5\").grid(row=8, column=0, padx=10, pady=5, sticky=\"w\")\n",
    "branch_combobox = ttk.Combobox(form_frame, font=(\"Poppins\", 12), width=28, state=\"readonly\")\n",
    "branch_combobox['values'] = (\"EXTC\", \"IT\", \"CS\", \"Mechanical\", \"Civil\")\n",
    "branch_combobox.set(\"Select Branch\")\n",
    "branch_combobox.grid(row=8, column=1, pady=5)\n",
    "branch_combobox.bind(\"<Return>\", focus_next_field)\n",
    "\n",
    "# Buttons with hover animation and styling\n",
    "button_frame = tk.Frame(root, bg=\"#f5f5f5\")\n",
    "button_frame.pack(pady=20)\n",
    "\n",
    "submit_button = tk.Button(button_frame, text=\"Submit\", font=(\"Poppins\", 14, \"bold\"), bg=\"#000000\", fg=\"white\", bd=2, relief=\"raised\", width=15, command=submit_details)\n",
    "submit_button.grid(row=0, column=0, padx=10)\n",
    "submit_button.bind(\"<Enter>\", lambda e: submit_button.config(bg=\"#333\"))\n",
    "submit_button.bind(\"<Leave>\", lambda e: submit_button.config(bg=\"#000000\"))\n",
    "\n",
    "clear_button = tk.Button(button_frame, text=\"Clear\", font=(\"Poppins\", 14, \"bold\"), bg=\"#ff4d4d\", fg=\"white\", bd=2, relief=\"raised\", width=15, command=clear_fields)\n",
    "clear_button.grid(row=0, column=1, padx=10)\n",
    "clear_button.bind(\"<Enter>\", lambda e: clear_button.config(bg=\"#ff1a1a\"))\n",
    "clear_button.bind(\"<Leave>\", lambda e: clear_button.config(bg=\"#ff4d4d\"))\n",
    "\n",
    "root.mainloop()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
